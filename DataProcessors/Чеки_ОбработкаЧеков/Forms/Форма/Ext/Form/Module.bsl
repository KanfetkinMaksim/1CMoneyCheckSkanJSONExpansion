&НаСервере
Функция ПреобразоватьДату(ДатаСтрока)
	Число = Лев(ДатаСтрока,2);
	Месяц = Сред(ДатаСтрока, 4, 2);
	Год = "20"+Сред(ДатаСтрока, 7, 2);
	Часы = Сред(ДатаСтрока, 10, 2);
	Минуты = Сред(ДатаСтрока, 13, 2);
	Возврат Дата(Год+Месяц+Число+Часы+Минуты);
КонецФункции

&НаСервере
Процедура СоздатьДокумент(Файл,ДанныеФайла,ТаблицаСТоварами)
	ВидАналитикиТовар = ПланыВидовХарактеристик.ВидыАналитик.НайтиПоНаименованию("Товар",Истина);
	Магазин = Справочники.Контакты.ПолучитьМагазин(ДанныеФайла.shopName,ДанныеФайла.shopAddress);
	ДокументРасхода = Документы.Расход.СоздатьДокумент();
	ДокументРасхода.Дата = ДанныеФайла.date;
	ДокументРасхода.ВалютаОперации = Константы.ВалютаУчета.Получить();
	ДокументРасхода.КошелекДолг = Объект.Кошелек;
	
	ДокументРасхода.Пользователь = ПараметрыСеанса.ТекущийПользователь;
	
	Строка = ДокументРасхода.АналитикаДокумента.Добавить();
	Строка.ВидАналитики = ПланыВидовХарактеристик.ВидыАналитик.МестоТраты;
	Строка.ЗначениеАналитикиВШапке = Магазин;
	Строка.РедактироватьВШапке = Истина;
	
	Строка = ДокументРасхода.АналитикаДокумента.Добавить();
	Строка.РедактироватьВШапке = Ложь;
	Строка.ВидАналитики = ВидАналитикиТовар;
	
	
	
	ВидИЗначениеАналитики = АналитикаСтатей.НоваяТаблицаВидИЗначениеАналитики();
	
	
	Для Каждого Элемент Из ТаблицаСТоварами Цикл
		НоваяСтрока = ДокументРасхода.Расходы.Добавить();
		НоваяСтрока.Сумма = Элемент.Сумма;
		НоваяСтрока.Количество = Элемент.Количество;
		НоваяСтрока.СтатьяРасходаИмущество = Элемент.СтатьяРасходов;
		
		ВидИЗначениеАналитики.Очистить();
		
		СтрокаПараметров = ВидИЗначениеАналитики.Добавить();
		СтрокаПараметров.ВидАналитики = ПланыВидовХарактеристик.ВидыАналитик.МестоТраты;
		СтрокаПараметров.ЗначениеАналитики = Магазин;
		
		СтрокаПараметров = ВидИЗначениеАналитики.Добавить();
		СтрокаПараметров.ВидАналитики = ВидАналитикиТовар;
		СтрокаПараметров.ЗначениеАналитики = Элемент.Товар;
		
		СсылкаНаНаборАналитики = АналитикаСтатей.ПолучитьСсылкуНаНаборЗначенийАналитик(ВидИЗначениеАналитики);
		
		НоваяСтрока.АналитикаСтатьи = СсылкаНаНаборАналитики;
	КонецЦикла;
	
	Если ДокументРасхода.Расходы.Итог("Сумма") <> ДанныеФайла.totalSum Тогда
		Сообщить("Сумма чека не совпадает с фактической суммой,
		|Сумма чека - " + ДанныеФайла.totalSum +";
		|Фактическая сумма - " + ДокументРасхода.Расходы.Итог("Сумма") + ";
		|Файл - " + ДанныеФайла.НаименованиеФайла,СтатусСообщения.ОченьВажное);
	КонецЕсли;
	
	ДокументРасхода.СуммаЧека = ДанныеФайла.totalSum;
	
	
	
	ДокументРасхода.Записать(РежимЗаписиДокумента.Проведение);
	
	Сообщить("Создан документ "+ДокументРасхода.Ссылка);
	
	СтруктураФайла = Справочники.ПрикрепленныеФайлы.СтруктураФайлаПоЕгоИмени(Файл.ПолноеИмя);
	СтруктураФайла.СпособОткрытия = Перечисления.СпособОткрытияПрикрепленногоФайла.СредствамиОС;
	СтруктураФайла.Наименование = ДанныеФайла.НаименованиеФайла;
	СтруктураФайла.Расширение = ".txt";
	СписокФайлов = Новый СписокЗначений;
	СписокФайлов.Добавить(СтруктураФайла);
	
	ПрикрепленныеФайлыСервер.ОбработатьИЗаписатьДанныеМультимедиа(СписокФайлов,ДокументРасхода.Ссылка);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтатьиРасходов(ТаблицаДанных)
	ТаблицаНаименований = ТаблицаДанных.Скопировать(,"КатегорияНаименование");
	ТаблицаНаименований.Свернуть("КатегорияНаименование");
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Категории.КатегорияНаименование КАК КатегорияНаименование
	               |ПОМЕСТИТЬ Категории
	               |ИЗ
	               |	&Категории КАК Категории
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	СтатьиРасходов.Ссылка КАК Ссылка,
	               |	Категории.КатегорияНаименование КАК КатегорияНаименование
	               |ИЗ
	               |	Категории КАК Категории
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СтатьиРасходов КАК СтатьиРасходов
	               |		ПО Категории.КатегорияНаименование = СтатьиРасходов.Наименование";
	Запрос.УстановитьПараметр("Категории",ТаблицаНаименований);
	Результат = Запрос.Выполнить().Выгрузить();
	
	Для Каждого Строка Из Результат Цикл
		Если Не ЗначениеЗаполнено(Строка.Ссылка) Тогда
			Строка.Ссылка = Справочники.СтатьиРасходов.СоздатьСтатьюРасходов(Строка.КатегорияНаименование);
			Сообщить("Создана статья расходов " + Строка.Ссылка)
		КонецЕсли;
		
		СтрокиТаблицы = ТаблицаДанных.НайтиСтроки(Новый Структура("КатегорияНаименование",Строка.КатегорияНаименование));
		Для Каждого Элемент Из СтрокиТаблицы Цикл
			Если Не ЗначениеЗаполнено(Элемент.СтатьяРасходов) Тогда
				Элемент.СтатьяРасходов = Строка.Ссылка;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТовары(ТаблицаДанных)
	ВидАналитики = ПланыВидовХарактеристик.ВидыАналитик.НайтиПоНаименованию("Товар",Истина);
	ТаблицаНаименований = ТаблицаДанных.Скопировать(,"ТоварНаименование");
	ТаблицаНаименований.Свернуть("ТоварНаименование");
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Товары.ТоварНаименование КАК Наименование
	               |ПОМЕСТИТЬ Товары
	               |ИЗ
	               |	&Товары КАК Товары
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Товары.Наименование КАК Наименование,
	               |	ДополнительныеЗначенияВидовАналитик.Ссылка КАК Ссылка
	               |ИЗ
	               |	Товары КАК Товары
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДополнительныеЗначенияВидовАналитик КАК ДополнительныеЗначенияВидовАналитик
	               |		ПО Товары.Наименование = ДополнительныеЗначенияВидовАналитик.Наименование
	               |			И (ДополнительныеЗначенияВидовАналитик.Активность)
	               |			И (НЕ ДополнительныеЗначенияВидовАналитик.ПометкаУдаления)
	               |			И (ДополнительныеЗначенияВидовАналитик.Владелец = &ВидАналитики)";
	Запрос.УстановитьПараметр("Товары",ТаблицаНаименований);
	Запрос.УстановитьПараметр("ВидАналитики",ВидАналитики);
	Результат = Запрос.Выполнить().Выгрузить();
	
	Для Каждого Строка Из Результат Цикл
		Если Строка.Наименование = "" Тогда
			Строка.Наименование = "Неопределено";
		КонецЕсли;
		Если Не ЗначениеЗаполнено(Строка.Ссылка) Тогда
			Строка.Ссылка = Справочники.ДополнительныеЗначенияВидовАналитик.СоздатьЗначениеАналитики(Строка.Наименование,ВидАналитики);
			Сообщить("Создан товар " + Строка.Ссылка)
		КонецЕсли;
		
		СтрокиТаблицы = ТаблицаДанных.НайтиСтроки(Новый Структура("ТоварНаименование",Строка.Наименование));
		Для Каждого Элемент Из СтрокиТаблицы Цикл
			Элемент.Товар = Строка.Ссылка;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ЗаполнитьСтатьиРасходовИзСоответствия(ТаблицаДанных)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Таблица.ТоварНаименование КАК ТоварНаименование,
	               |	Таблица.КатегорияНаименование КАК КатегорияНаименование,
	               |	Таблица.Количество КАК Количество,
	               |	Таблица.Цена КАК Цена,
	               |	Таблица.Сумма КАК Сумма,
	               |	Таблица.СтатьяРасходов КАК СтатьяРасходов,
	               |	Таблица.Товар КАК Товар
	               |ПОМЕСТИТЬ Таблица
	               |ИЗ
	               |	&Таблица КАК Таблица
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Таблица.ТоварНаименование КАК ТоварНаименование,
	               |	Таблица.КатегорияНаименование КАК КатегорияНаименование,
	               |	Таблица.Количество КАК Количество,
	               |	Таблица.Цена КАК Цена,
	               |	Таблица.Сумма КАК Сумма,
	               |	Таблица.Товар КАК Товар,
	               |	Чеки_СоответствиеТоваровИСтатей.Статья КАК СтатьяРасходов
	               |ИЗ
	               |	Таблица КАК Таблица
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Чеки_СоответствиеТоваровИСтатей КАК Чеки_СоответствиеТоваровИСтатей
	               |		ПО Таблица.Товар = Чеки_СоответствиеТоваровИСтатей.Товар";
	Запрос.УстановитьПараметр("Таблица",ТаблицаДанных);
	Возврат Запрос.Выполнить().Выгрузить();
КонецФункции

&НаСервере
Процедура ОбработатьФайл(Файл,ДанныеФайла)
	ТаблицаДанных = Новый ТаблицаЗначений;
	ТаблицаДанных.Колонки.Добавить("ТоварНаименование",Новый ОписаниеТипов("Строка",Новый КвалификаторыСтроки(1024)));
	ТаблицаДанных.Колонки.Добавить("КатегорияНаименование",Новый ОписаниеТипов("Строка",Новый КвалификаторыСтроки(80)));
	ТаблицаДанных.Колонки.Добавить("Количество",Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(10,3)));
	ТаблицаДанных.Колонки.Добавить("Цена",Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(10,2)));
	ТаблицаДанных.Колонки.Добавить("Сумма",Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(10,2)));
	ТаблицаДанных.Колонки.Добавить("СтатьяРасходов",Новый ОписаниеТипов("СправочникСсылка.СтатьиРасходов"));
	ТаблицаДанных.Колонки.Добавить("Товар",Новый ОписаниеТипов("СправочникСсылка.ДополнительныеЗначенияВидовАналитик"));
	
	Для Каждого Элемент Из ДанныеФайла.products Цикл
		НоваяСтрока = ТаблицаДанных.Добавить();
		НоваяСтрока.ТоварНаименование = Элемент.Name;
		НоваяСтрока.КатегорияНаименование = Элемент.category;
		НоваяСтрока.Цена = Элемент.price;
		НоваяСтрока.Сумма = Элемент.sum;
		НоваяСтрока.Количество = Элемент.quantity;
	КонецЦикла;
	
	ЗаполнитьТовары(ТаблицаДанных);
	ТаблицаДанных = ЗаполнитьСтатьиРасходовИзСоответствия(ТаблицаДанных);
	ЗаполнитьСтатьиРасходов(ТаблицаДанных);
	
	
	СоздатьДокумент(Файл,ДанныеФайла,ТаблицаДанных);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьДанныеФайла(ИмяФайла)
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.ОткрытьФайл(ИмяФайла);
	Данные = ПрочитатьJSON(ЧтениеJSON);
	ЧтениеJSON.Закрыть();
	
	Данные.date = ПреобразоватьДату(Данные.date);
	
	Возврат Данные;
КонецФункции

&НаСервере
Процедура ОбработатьНаСервере()
	Если Не ЗначениеЗаполнено(Объект.Кошелек) Тогда
		Сообщить("Не заполнен кошелек");
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.ПутьПапкиОбработки) Тогда
		Сообщить("Не заполнен путь папки обработки");
		Возврат;
	КонецЕсли;
	
	МассивФайлов = НайтиФайлы(Объект.ПутьПапкиОбработки,"*.json");
	
	
	Для Каждого Файл Из МассивФайлов Цикл
		ДанныеФайла = ПолучитьДанныеФайла(Файл.ПолноеИмя);
		
		НаименованиеФайла = СтрШаблон("%1-%2-%3",
			Формат(ДанныеФайла.date,"ДФ=yyyyMMddHHmmss"),
			Формат(ДанныеФайла.totalSum,"ЧГ=0"),
			ДанныеФайла.shopName);
			
		Если Справочники.ПрикрепленныеФайлы.НайтиФайл(НаименованиеФайла) <> Неопределено Тогда
			//Сообщить(СтрШаблон("Файл ""%1"" уже обработан и хранится в базе под именем ""%2""",
			//	Файл.Имя,
			//	НаименованиеФайла));
			Продолжить;
		КонецЕсли;
		
		ДанныеФайла.Вставить("НаименованиеФайла",НаименованиеФайла);
		
		ОбработатьФайл(Файл,ДанныеФайла);
		Сообщить("Обработан файл "+ Файл.Имя);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура Обработать(Команда)
	ОбработатьНаСервере();
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Объект.ПутьПапкиОбработки = "C:\Users\Usr\Downloads\Telegram Desktop";
КонецПроцедуры
